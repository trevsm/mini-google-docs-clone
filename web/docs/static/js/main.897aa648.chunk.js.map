{"version":3,"sources":["slateInitialValue.ts","SyncingEditor.tsx","GroupEditor.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialValue","Value","fromJSON","document","nodes","object","type","text","socket","io","SyncingEditor","_ref","groupId","_useState","useState","_useState2","Object","slicedToArray","value","setValue","id","useRef","concat","Date","now","editor","remote","useEffect","fetch","then","x","json","data","eventName","on","_ref2","editorId","ops","current","forEach","op","applyOperation","off","react_default","a","createElement","Fragment","onMouseDown","e","preventDefault","toggleMark","slate_react_es","ref","style","backgroundColor","maxWidth","minHeight","renderMark","props","_editor","next","mark","letterSpacing","color","children","onChange","opts","operations","filter","o","has","toJS","map","objectSpread2","source","length","emit","toJSON","GroupEditor","match","params","react","SyncingEditor_SyncingEditor","App","react_router_dom","react_router","path","exact","render","to","component","Boolean","window","location","hostname","ReactDOM","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.897aa648.chunk.js","sourcesContent":["import { Value } from \"slate\";\r\n\r\nexport const initialValue = Value.fromJSON({\r\n  document: {\r\n    nodes: [\r\n      {\r\n        object: \"block\",\r\n        type: \"paragraph\",\r\n        nodes: [\r\n          {\r\n            object: \"text\",\r\n            text: \"A line of text in a paragraph.\"\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n} as any);\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { Editor } from \"slate-react\";\r\nimport { initialValue } from \"./slateInitialValue\";\r\nimport io from \"socket.io-client\";\r\nimport { Operation, Value } from \"slate\";\r\n\r\nconst socket = io(\"http://localhost:4000\");\r\n\r\ninterface Props {\r\n  groupId: string;\r\n}\r\n\r\nexport const SyncingEditor: React.FC<Props> = ({ groupId }) => {\r\n  const [value, setValue] = useState(initialValue);\r\n  const id = useRef(`${Date.now()}`);\r\n  const editor = useRef<Editor | null>(null);\r\n  const remote = useRef(false);\r\n\r\n  useEffect(() => {\r\n    fetch(`http://localhost:4000/groups/${groupId}`).then(x =>\r\n      x.json().then(data => {\r\n        setValue(Value.fromJSON(data));\r\n      })\r\n    );\r\n    const eventName = `new-remote-operations-${groupId}`;\r\n    socket.on(\r\n      eventName,\r\n      ({ editorId, ops }: { editorId: string; ops: Operation[] }) => {\r\n        if (id.current !== editorId) {\r\n          remote.current = true;\r\n          ops.forEach((op: any) => editor.current!.applyOperation(op));\r\n          remote.current = false;\r\n        }\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      socket.off(eventName);\r\n    };\r\n  }, [groupId]);\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        onMouseDown={e => {\r\n          e.preventDefault();\r\n          // bold selected text\r\n          editor.current!.toggleMark(\"bold\");\r\n        }}\r\n      >\r\n        bold\r\n      </button>\r\n      <button\r\n        onMouseDown={e => {\r\n          e.preventDefault();\r\n          // bold selected text\r\n          editor.current!.toggleMark(\"italic\");\r\n        }}\r\n      >\r\n        italic\r\n      </button>\r\n      <Editor\r\n        ref={editor}\r\n        style={{\r\n          backgroundColor: \"#fafafa\",\r\n          maxWidth: 800,\r\n          minHeight: 150\r\n        }}\r\n        value={value}\r\n        renderMark={(props, _editor, next) => {\r\n          if (props.mark.type === \"bold\") {\r\n            return (\r\n              <strong\r\n                style={{\r\n                  letterSpacing: 1,\r\n                  color: \"pink\"\r\n                }}\r\n              >\r\n                {props.children}\r\n              </strong>\r\n            );\r\n          } else if (props.mark.type === \"italic\") {\r\n            return <em>{props.children}</em>;\r\n          }\r\n\r\n          return next();\r\n        }}\r\n        onChange={opts => {\r\n          setValue(opts.value);\r\n\r\n          const ops = opts.operations\r\n            .filter(o => {\r\n              if (o) {\r\n                return (\r\n                  o.type !== \"set_selection\" &&\r\n                  o.type !== \"set_value\" &&\r\n                  (!o.data || !o.data.has(\"source\"))\r\n                );\r\n              }\r\n\r\n              return false;\r\n            })\r\n            .toJS()\r\n            .map((o: any) => ({ ...o, data: { source: \"one\" } }));\r\n\r\n          if (ops.length && !remote.current) {\r\n            socket.emit(\"new-operations\", {\r\n              editorId: id.current,\r\n              ops,\r\n              value: opts.value.toJSON(),\r\n              groupId\r\n            });\r\n          }\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import * as React from \"react\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { SyncingEditor } from \"./SyncingEditor\";\r\n\r\nexport const GroupEditor: React.FC<RouteComponentProps<{ id: string }>> = ({\r\n  match: {\r\n    params: { id }\r\n  }\r\n}) => {\r\n  return (\r\n    <div>\r\n      <SyncingEditor groupId={id} />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\r\nimport { GroupEditor } from \"./GroupEditor\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Route\r\n        path=\"/\"\r\n        exact\r\n        render={() => {\r\n          return <Redirect to={`/group/${Date.now()}`} />;\r\n        }}\r\n      />\r\n      <Route path=\"/group/:id\" component={GroupEditor} />\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}